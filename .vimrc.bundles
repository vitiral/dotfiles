" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"                    __ _ _____              _
"         ___ _ __  / _/ |___ /      __   __(_)_ __ ___
"        / __| '_ \| |_| | |_ \ _____\ \ / /| | '_ ` _ \
"        \__ \ |_) |  _| |___) |_____|\ V / | | | | | | |
"        |___/ .__/|_| |_|____/        \_/  |_|_| |_| |_|
"            |_|
"
"   This is the personal .vimrc.bundles file of Steve Francia.
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   This file imports the various plugins of spf13. If you
"   wish to alter which groups are imported, see vimrc.before.
"   If you wish to add or remove individual bundles, create
"   ~/.vimrc.bundles.local and `Bundle` or `UnBundle` as needed
"   from there.
"
"   You can find me at http://spf13.com
" }

" Environment {

    " Basics {
        set nocompatible        " Must be first line
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

          " Be nice and check for multi_byte even if the config requires
          " multi_byte support most of the time
          if has("multi_byte")
            " Windows cmd.exe still uses cp850. If Windows ever moved to
            " Powershell as the primary terminal, this would be utf-8
            set termencoding=cp850
            " Let Vim use utf-8 internally, because many scripts require this
            set encoding=utf-8
            setglobal fileencoding=utf-8
            " Windows has traditionally used cp1252, so it's probably wise to
            " fallback into cp1252 instead of eg. iso-8859-15.
            " Newer Windows files might contain utf-8 or utf-16 LE so we might
            " want to try them first.
            set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
          endif
        endif
    " }

    " Setup Bundle Support {
        " The next three lines ensure that the ~/.vim/bundle/ system works
        filetype off
        set rtp+=~/.vim/bundle/vundle
        call vundle#rc()
    " }

    " Add an UnBundle command {
    function! UnBundle(arg, ...)
      let bundle = vundle#config#init_bundle(a:arg, a:000)
      call filter(g:bundles, 'v:val["name_spec"] != "' . a:arg . '"')
    endfunction

    com! -nargs=+         UnBundle
    \ call UnBundle(<args>)
    " }

" }

" Bundles {

    " Deps {
        Bundle 'gmarik/vundle'
        Bundle 'MarcWeber/vim-addon-mw-utils'
        Bundle 'tomtom/tlib_vim'
        if executable('ag')
            Bundle 'mileszs/ack.vim'
            let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
        elseif executable('ack-grep')
            let g:ackprg="ack-grep -H --nocolor --nogroup --column"
            Bundle 'mileszs/ack.vim'
        elseif executable('ack')
            Bundle 'mileszs/ack.vim'
        endif
    " }

    " In your .vimrc.before.local file
    " list only the plugin groups you will use
    if !exists('g:spf13_bundle_groups')
        let g:spf13_bundle_groups=['minimal', 'general', 'writing', 'youcompleteme', 'programming', 'micro', 'python', 'golang', 'html', 'misc',]
    endif

    " To override all the included bundles, add the following to your
    " .vimrc.bundles.local file:
    "   let g:override_spf13_bundles = 1
    if !exists("g:override_spf13_bundles")

        " Minimal {
        if count(g:spf13_bundle_groups, 'minimal')
            " git support
            Bundle 'tpope/vim-fugitive'
            " shows which lines have been added/removed version control
            Bundle 'mhinz/vim-signify'
            " better colors
            Bundle 'altercation/vim-colors-solarized'
            " use surounding text in commands
            Bundle 'tpope/vim-surround'
            " easier typing of common commands in insert mode
            "Bundle 'vitiral/vim-ergonomic'
            " comment out lines easier
            Bundle 'scrooloose/nerdcommenter'
            let g:NERDCustomDelimiters = { 'python': { 'left': '# '} }
        endif
        " }

        " General {
        if count(g:spf13_bundle_groups, 'general')
            " edit text using multiple cursors. Cntrl-n in normal mode
            Bundle 'terryma/vim-multiple-cursors'
            " use . after plugin map
            Bundle 'tpope/vim-repeat'
            " Shows lots of details (column, row, etc)
            Bundle 'bling/vim-airline'
            " shows buffers below
            Bundle 'bling/vim-bufferline'
            " allows for easier searching (<leader><leader><standard vim search key>)
            Bundle 'Lokaltog/vim-easymotion'
            " shows indent levels
            Bundle 'nathanaelkane/vim-indent-guides'
            " show prior screen position when opening file
            Bundle 'vim-scripts/restore_view.vim'
            "Bundle 'kana/vim-textobj-user'
            "Bundle 'kana/vim-textobj-indent'
        endif
        " }

        " General Programming {
        if count(g:spf13_bundle_groups, 'programming')
            Bundle 'scrooloose/syntastic'
            let g:syntastic_python_python_exec = 'python2'
            if !count(g:spf13_bundle_groups, 'minimal')
                Bundle 'godlygeek/tabular'
            endif
        endif
    " }

    " Snippets & AutoComplete {
        if count(g:spf13_bundle_groups, 'youcompleteme')
            " Best general language code completer around
            Bundle 'Valloric/YouCompleteMe'
            " TODO: figure this out. automatically write common code
            " use snippets + community library of snippets
            Bundle 'SirVer/ultisnips'
            Bundle 'honza/vim-snippets'
        endif
    " }

    " Python {
        if count(g:spf13_bundle_groups, 'python')
            let g:syntastic_python_flake8_args = '--ignore="E701,E501,E241,E126,E127,E128,W801"'
            let g:syntastic_python_pylint_args='-d C0103,C0111,R0903,R0904,E501,E1101,E1103,W0141,W0142,W0201,W0232,W0511 -f parseable -r n -i y'
            " code refactoring
            Bundle 'python-rope/ropevim'
            " code folding with reasonable cpu requirements (don't use pymode it makes things laggy)
            Bundle 'tmhedberg/SimpylFold'
        endif
    " }

    " Golang {
        if count(g:spf13_bundle_groups, 'golang')
            Bundle 'fatih/vim-go'
        endif
    " }

    " Javascript {
        if count(g:spf13_bundle_groups, 'javascript')
            Bundle 'elzr/vim-json'
            Bundle 'groenewege/vim-less'
            Bundle 'pangloss/vim-javascript'
            Bundle 'briancollins/vim-jst'
            Bundle 'kchmck/vim-coffee-script'
        endif
    " }

    " HTML {
        if count(g:spf13_bundle_groups, 'html')
            Bundle 'amirh/HTML-AutoCloseTag'
            Bundle 'hail2u/vim-css3-syntax'
            Bundle 'gorodinskiy/vim-coloresque'
            Bundle 'tpope/vim-haml'
        endif
    " }

    " Misc {
        if count(g:spf13_bundle_groups, 'misc')
            Bundle 'tpope/vim-markdown'
        endif
    " }

    endif

" }
