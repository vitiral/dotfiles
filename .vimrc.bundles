" Bundles file
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:

" Environment {

" Basics {
    set nocompatible        " Must be first line
" }

" Windows Compatible {
    " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
    " across (heterogeneous) systems easier.
    if has('win32') || has('win64')
      set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

      " Be nice and check for multi_byte even if the config requires
      " multi_byte support most of the time
      if has("multi_byte")
        " Windows cmd.exe still uses cp850. If Windows ever moved to
        " Powershell as the primary terminal, this would be utf-8
        set termencoding=cp850
        " Let Vim use utf-8 internally, because many scripts require this
        set encoding=utf-8
        setglobal fileencoding=utf-8
        " Windows has traditionally used cp1252, so it's probably wise to
        " fallback into cp1252 instead of eg. iso-8859-15.
        " Newer Windows files might contain utf-8 or utf-16 LE so we might
        " want to try them first.
        set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
      endif
    endif
" }

" Setup Bundle Support {
    " The next three lines ensure that the ~/.vim/bundle/ system works
    filetype off
    set rtp+=~/.vim/bundle/vundle
    call vundle#rc()
" }

" Add an UnBundle command {
function! UnBundle(arg, ...)
  let bundle = vundle#config#init_bundle(a:arg, a:000)
  call filter(g:bundles, 'v:val["name_spec"] != "' . a:arg . '"')
endfunction

com! -nargs=+         UnBundle
\ call UnBundle(<args>)
" }

" }

" Bundles {

" Dependencies {
    Bundle 'gmarik/vundle'
    Bundle 'MarcWeber/vim-addon-mw-utils'
    Bundle 'tomtom/tlib_vim'
    Bundle 'mileszs/ack.vim'
    " Command to automatically do search for regexp at same time as Ack
    command! -nargs=1 Ack2 execute "Ack " . <q-args> | execute "/".<q-args>
    nnoremap gf :Ack2<space>
    if executable('ag')
        let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
        set grepprg=ag\ --nogroup\ --nocolor
    elseif executable('ack-grep')
        let g:ackprg="ack-grep -H --nocolor --nogroup --column"
    endif
" }

" select only minimal packages with:
" let g:minimal_config=true

" Minimal {
    " git support
    Bundle 'tpope/vim-fugitive'
    " shows which lines have been added/removed version control
    Bundle 'mhinz/vim-signify'
    " better colors
    Bundle 'altercation/vim-colors-solarized'
    " use surounding text in commands
    Bundle 'tpope/vim-surround'
    " comment out lines easier
    Bundle 'scrooloose/nerdcommenter'
    let g:NERDCustomDelimiters = { 'python': { 'left': '# '} }
    " File searching funcionality
    Bundle 'kien/ctrlp.vim'
    Bundle 'vim-scripts/EasyGrep'
    Bundle 'scrooloose/nerdtree'
    let g:EasyGrepRecursive=1
    let g:EasyGrepCommand=1
    " encryption
    Bundle "openssl.vim"
" }

" General {
    " edit text using multiple cursors. Cntrl-n in normal mode
    Bundle 'terryma/vim-multiple-cursors'
    " be able to repeat with . after functions
    Bundle 'tpope/vim-repeat'
    " Shows lots of details (column, row, etc)
    Bundle 'bling/vim-airline'
    " shows buffer line
    Bundle 'bling/vim-bufferline'
    " allows for easier searching (<leader><leader><standard vim search key>)
    Bundle 'Lokaltog/vim-easymotion'
    " shows indent levels
    Bundle 'nathanaelkane/vim-indent-guides'
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_enable_on_vim_startup = 1
    " show prior screen position when opening file
    Bundle 'vim-scripts/restore_view.vim'
    " always changes directory to root of project
    Bundle 'airblade/vim-rooter'
    let g:rooter_change_directory_for_non_project_files=1
    let g:rooter_silent_chdir=1
" }

" General Programming {
    Bundle 'scrooloose/syntastic'
    if !exists('g:minimal_config')
        Bundle 'godlygeek/tabular'
    endif
" }

" Snippets & AutoComplete {
    " Best general language code completer around
    if !exists('g:minimal_config')
        Bundle 'Valloric/YouCompleteMe'
    endif
    " use snippets + community library of snippets
    Bundle 'SirVer/ultisnips'
    Bundle 'honza/vim-snippets'
" }

" Python {
    let g:syntastic_python_python_exec = 'python2'
    let g:syntastic_python_flake8_args = '--ignore="E701,E501,E241,E126,E127,E128,W801,E501"'
    let g:syntastic_python_pylint_args='-d C0103,C0111,C0301,R0903,R0904,R0913,R0914,E501,E1101,E1103,W0141,W0142,W0201,W0232,W0511 -f parseable -r n -i y'
    if !exists('g:minimal_config')
        " code refactoring
        Bundle 'python-rope/ropevim'
    endif
    " code folding with reasonable cpu requirements (don't use pymode it makes things laggy)
    Bundle 'tmhedberg/SimpylFold'
" }

" Golang {
    Bundle 'fatih/vim-go'
" }

" Javascript {
    Bundle 'elzr/vim-json'
    nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
    let g:vim_json_syntax_conceal = 0 
    Bundle 'groenewege/vim-less'
    Bundle 'pangloss/vim-javascript'
    Bundle 'briancollins/vim-jst'
    Bundle 'kchmck/vim-coffee-script'
" }

" HTML {
    Bundle 'amirh/HTML-AutoCloseTag'
        au FileType xhtml,xml ru ftplugin/html/autoclosetag.vim
    nmap <Leader>ac <Plug>ToggleAutoCloseMappings
    Bundle 'hail2u/vim-css3-syntax'
    Bundle 'gorodinskiy/vim-coloresque'
    Bundle 'tpope/vim-haml'
" }

" Misc {
    Bundle 'tpope/vim-markdown'
" }

