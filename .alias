#!/usr/bin/bash

##################################################
# Environment

if [[ -e ~/.alias.local.before ]]; then
    source ~/.alias.local.before
fi

export EDITOR='vim'
alias vem='emacs --no-splash --no-window-system'
alias dif='colordiff -ENwbu'
alias sudo='sudo '

info(){vim -c "Vinfo $1" -c 'only'}
# urxvt font setter
setfont(){printf '\33]50;%s\007' "xft:inconsolata:size=$1"}

pathappend() {
    # properly append path to end of PATH
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        export PATH="${PATH:+"$PATH:"}$1"  # handles case where path is empty
    fi
}

pathinsert() {
    # properly insert path at beginning of PATH
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        export PATH="$1:$PATH"
    fi
}

pathinsert "$HOME/bin"

# auto connect to ssh-agent
if ! pgrep -u $USER ssh-agent > /dev/null; then
    ssh-agent > ~/.ssh-agent-thing
fi
if [[ "$SSH_AGENT_PID" == "" ]]; then
    eval $(<~/.ssh-agent-thing)
fi
ssh-add -l > /dev/null || alias ssh='ssh-add -l > /dev/null || ssh-add && unalias ssh; ssh'

##################################################
# development commands

function aa_256 () {     local o= i= x=`tput op` cols=`tput cols` y= oo= yy=;    y=`printf %$(($cols-6))s`;    yy=${y// /=};    for i in {0..256};    do        o=00${i};        oo=`echo -en "setaf ${i}\nsetab ${i}\n"|tput -S`;        echo -e "${o:${#o}-3:3} ${oo}${yy}${x}";    done;}

alias lic_mit="wget -q https://raw.githubusercontent.com/cloudformdesign/licenses/master/LICENSE.MIT -O LICENSE.txt && echo created license"
alias prep="grep '' -n -P -C 2 --exclude-dir '.ropeproject'"
alias pdf="apvlv"
# note: combine pdfs with pdfunite, requires poppler
alias litevault="litevault ~/.config/vault -e vim"

alias js="rhino"

alias gd="git diff"
alias gs="git status"
alias gcam="git commit -am"

corrupt() {
    let i=`ls -al $1 | awk '{print $5}'`
    let i=`shuf -i 0-$i -n 1`
    # let b=`dd if=$1 bs=1 count=1 seek=$i`
    # let b=$(expr ($b + 1) % 256)
    # let b=$(printf "\x$(printf %x $b)")
    # echo "corrupting byte at $i with: " $(printf "%d" $b)
    # echo b | dd of=$1 bs=1 count=1 seek=$i
    echo "corrupting byte at $i"
    dd if=/dev/urandom of=$1 bs=1 count=1 seek=$i conv=notrunc &> /dev/null
}

##################################################
# Python

pathinsert "$HOME/.local/bin"

export PYTHONSTARTUP="$HOME/.pythonrc.py"
export PYTHONDONTWRITEBYTECODE=0            # prevents .pyc files

# use the local installation of python first
#python_root="$HOME/software/pyconda/envs"
#py2bin="${python_root}/python2/bin"
#py3bin="${python_root}/python3/bin"
#pathinsert $py3bin
#pathinsert $py2bin

PYCONDA="$HOME/software/pyconda"
alias conda="$PYCONDA/bin/conda"
alias py2c="$PYCONDA/envs/python2/bin/python"
alias ipy2c="$PYCONDA/envs/python2/bin/ipython"
alias pip2c="$PYCONDA/envs/python2/bin/pip"


alias pypath='echo $PYTHONPATH'
alias py='python3'
alias pyt="py.test3 --tb short"
alias pytdoc='pyt --doctest-modules'  # don't forget you need to give module path
alias pytdb='pyt -sx --pdb'
alias pdb='py -m ipdb'
alias dbe='py -m cloudtb.dbe'
alias pydev='py setup.py develop'
# http://peterdowns.com/posts/first-time-with-pypi.html
# passwords are stored at .pypirc
alias pypi='py setup.py register -r pypi sdist upload'
alias pypitest='py setup.py register -r pypitest'

alias py2='python2'
alias py2t="py.test2 --tb short -m \"not slow\""
alias py2tdoc='py2t --doctest-modules'
alias py2tdb='py2t -vvsx --pdb'
alias pdb2='py2 -m ipdb'
alias dbe2='py2 -m cloudtb.dbe'
alias py2dev='py2 setup.py develop'

alias py2analyze="pyreverse sf_platform/core/rtfi/ -p dependencies && xdot classes_dependencies.dot &&"
alias pyclean="rm -r ./**/*.pyc"
#alias py2graph="sfood sf_platform/core/rtfi | sfood-graph > graph.dot && xdot graph.dot"

##################################################
# Micro Python
alias upy='micropython'
alias upip='~/projects/micropython/tools/pip-micropython'
# pyboard development
alias pyb="sudo screen /dev/ttyACM0"

##################################################
# Rust
pathappend $HOME/.cargo/bin
pathappend $HOME/projects/rst/target/release

export RUST_BACKTRACE=1
export RUST_SRC_PATH=$HOME/software/rust/src
export CARGO_HOME=$HOME/.cargo

alias rust_release="rustup default stable; cargo build --release --target=x86_64-unknown-linux-musl; rustup default nightly"

##################################################
# Tmux
alias tls="tmux list-sessions"
alias tatt="tmux attach -t"
alias tnew="tmux new -s"
alias trm="tmux kill-session -t"
alias tmv="tmux rename-session -t"  # target-session new-name
alias tkill="tmux kill-server"
alias town="tmux detach -a"  # detach all other sessions from tmux, getting it to correct size
alias tclear="clear; tmux clear-history"

##################################################
# Git
alias gpyignore="wget -q https://raw.githubusercontent.com/github/gitignore/master/Python.gitignore -O .gitignore && echo created python .gitignore file"
alias g='git'
alias gs='git status'
alias gst='git status'
alias gss='git status -s'
alias gd='git diff --color-words'
alias gdc='gd --cached'
alias gdn='gd --name-only'
alias gp='git push'
alias gpo='git push origin'
alias gc='git commit'
alias gca='git commit -va'
alias gcam='git commit -vam'
alias gc!='git commit -v --amend'
alias gco='git checkout'
alias gcm='git checkout master'
alias gcb='git checkout -b'
alias gr='git remote'
alias grls='git remote -v'
alias grmv='git remote rename'
alias grrm='git remote remove'
alias gb='git branch'
alias gbd='git branch -d'
alias gconfig='git config --list'
alias glog='git log --oneline --decorate --color --graph'
alias ga='git add'
#alias gap='git add --patch'
#alias gaa='git add --all'
alias gm='git merge'
alias ghash='git rev-parse HEAD'

gitio() {
    curl -i http://git.io -F "url=$1"
}

alias tsave="tmux capture-pane -S -100000 ; tmux save-buffer"

## Sign and verify commits with GPG
#alias gcs='git commit -S'
#alias gsps='git show --pretty=short --show-signature'

## Sign and verify tags with GPG
#alias gts='git tag -s'
#alias gvt='git verify-tag'



##################################################
# Networking
ipscan() {
    sudo nmap -sn $1/24 | grep 'Nmap scan report for'
}

alias netinfo='echo "## netstat -nr:" && netstat -nr && echo "## ifconfig:" && ifconfig | pcregrep -M "(eth0|wlan0)\s+Link.*\n\s+inet"'

# File System
alias untar="tar -zxvf"
dotar() {
    tar -zcvf $1.tar.gz $1
}

# automatically move ssh public credentials into authorized_keys of system connecting with
ssh_autoauth() {
    tmp_keys="/tmp/${USER}_tmpauthkeys"
    ssh_keys="~/.ssh/authorized_keys"
    command="cat > $tmp_keys && mkdir -p ~/.ssh && cat $tmp_keys >> $ssh_keys && sort -u $ssh_keys > $tmp_keys && mv $tmp_keys $ssh_keys"
    cat ~/.ssh/id_rsa.pub | ssh $1 $command
    ssh "$@"
}

reconnect() {
    if ip link | grep wlp2s0; then
        sudo systemctl restart netctl-auto@wlp2s0.service
    else
        sudo systemctl restart dhcpcd@enp11s0.service
    fi
}


##################################################
# OS specific aliases

alias arki=wiki-search
pacman-disowned() {
    tmp=${TMPDIR-/tmp}/pacman-disowned-$UID-$$
    db=$tmp/db
    fs=$tmp/fs
    mkdir "$tmp"
    trap 'rm -rf "$tmp"' EXIT
    pacman -Qlq | sort -u > "$db"
    find /etc /opt /usr ! -name lost+found \( -type d -printf '%p/\n' -o -print \) | sort > "$fs"
    comm -23 "$fs" "$db"
}

pacman-list() {
    # List explicitly installed packages
    echo "### Installed from official repos"
    pacman -Qen
    echo "### Installed from non-official repos"
    pacman -Qem
}


archeck() {
    echo '############################################################'
    echo '###' Broken symlinks: find . -type l -! -exec test -e {} \; -print
    find . -type l -! -exec test -e {} \; -print
    echo '############################################################'
    echo '###' Cleaning Packages: pacache -r; paccache -ruk0; sudo pacman -R $(pacman -Qdtq);
    sudo paccache -r                     # clean package cache (except most recent 3 versions)
    sudo paccache -ruk0                  # clean all uninstalled packages from cache
    sudo pacman -R $(pacman -Qdtq)  # remove packages with no dependency links
    echo '\n############################################################'
    echo '###' Major Errors / logs
    echo '###' Checking if systemd services have failed: systemctl --failed
    systemctl --failed
    echo '\n############################################################'
    echo '###' High priority systemd journals: journalctl -p 0..3 -xn
    journalctl -p 0..3 -xn
}


if [[ `uname` == 'Darwin' ]]; then
    alias vim='/Applications/MacVim.app/Contents/MacOS/Vim'
    alias minicom=/opt/minicom/2.2/bin/minicom
elif [[ `uname` == 'Linux' ]]; then
    # arrow keys are bound to moving words. Use cntrl to
    # setxkbmap -option "ctrl:nocaps" >> /dev/null
    # http://efod.se/writings/linuxbook/html/caps-lock-to-ctrl.html
	xmodmap -e 'keycode 66 = Control_L'
	xmodmap -e 'clear Lock'
	xmodmap -e 'add Control = Control_L'
elif [[ `uname` == 'Cygwin' ]]; then
    :  # pass, none yet
fi

if [[ -e ~/.alias.local ]]; then
    source ~/.alias.local
fi


